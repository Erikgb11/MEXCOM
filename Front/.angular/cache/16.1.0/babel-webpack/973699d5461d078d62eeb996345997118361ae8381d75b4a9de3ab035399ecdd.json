{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/flex-layout/flex\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/icon\";\nfunction RegistroComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistroComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegistroComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegistroComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Passwords do not match \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegistroComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.form = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n      confirmPassword: ['', [Validators.required]]\n    });\n  }\n  register(event) {\n    event.preventDefault();\n    if (this.form.valid && this.checkPasswordMatch()) {\n      // Aquí puedes enviar los datos de registro al servidor\n      // Por ejemplo, puedes llamar a un servicio de registro:\n      // this.authService.register(this.form.value);\n    }\n  }\n  checkRequiredError(controlName) {\n    const control = this.form.get(controlName);\n    return control?.hasError('required') && control.touched;\n  }\n  checkPasswordMatch() {\n    const passwordControl = this.form.get('password');\n    const confirmPasswordControl = this.form.get('confirmPassword');\n    if (passwordControl && confirmPasswordControl) {\n      const password = passwordControl.value;\n      const confirmPassword = confirmPasswordControl.value;\n      return password === confirmPassword;\n    }\n    return false;\n  }\n  checkPasswordMismatchError() {\n    const confirmPasswordControl = this.form.get('confirmPassword');\n    return confirmPasswordControl?.dirty && !this.checkPasswordMatch();\n  }\n}\nRegistroComponent.ɵfac = function RegistroComponent_Factory(t) {\n  return new (t || RegistroComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nRegistroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistroComponent,\n  selectors: [[\"app-registro\"]],\n  decls: 25,\n  vars: 5,\n  consts: [[\"fxLayout\", \"column\", 1, \"registration-form\", \"align-items-center\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"matInput\", \"\", \"placeholder\", \"Type your email\", \"type\", \"email\", \"formControlName\", \"email\"], [\"matPrefix\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"Type your password\", \"type\", \"password\", \"formControlName\", \"password\"], [\"matInput\", \"\", \"placeholder\", \"Confirm your password\", \"type\", \"password\", \"formControlName\", \"confirmPassword\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"register-button\", \"mt-3\"]],\n  template: function RegistroComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegistroComponent_Template_form_ngSubmit_0_listener($event) {\n        return ctx.register($event);\n      });\n      i0.ɵɵelementStart(1, \"mat-form-field\", 1)(2, \"mat-label\");\n      i0.ɵɵtext(3, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"mat-icon\", 3);\n      i0.ɵɵtext(6, \"mail_outline\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, RegistroComponent_mat_error_7_Template, 2, 0, \"mat-error\", 4);\n      i0.ɵɵtemplate(8, RegistroComponent_mat_error_8_Template, 4, 0, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\", 1)(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 5);\n      i0.ɵɵelementStart(13, \"mat-icon\", 3);\n      i0.ɵɵtext(14, \"lock_outline\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, RegistroComponent_mat_error_15_Template, 4, 0, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"mat-form-field\", 1)(17, \"mat-label\");\n      i0.ɵɵtext(18, \"Confirm Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 6);\n      i0.ɵɵelementStart(20, \"mat-icon\", 3);\n      i0.ɵɵtext(21, \"lock_outline\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(22, RegistroComponent_mat_error_22_Template, 2, 0, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 7);\n      i0.ɵɵtext(24, \"Register\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.form && ctx.checkRequiredError(\"email\") && !ctx.checkRequiredError(\"email\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.checkRequiredError(\"email\"));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.checkRequiredError(\"password\"));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.checkPasswordMismatchError());\n    }\n  },\n  dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.DefaultLayoutDirective, i4.MatButton, i5.MatInput, i6.MatFormField, i6.MatLabel, i6.MatError, i6.MatPrefix, i7.MatIcon],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RegistroComponent","constructor","formBuilder","form","group","email","required","password","confirmPassword","register","event","preventDefault","valid","checkPasswordMatch","checkRequiredError","controlName","control","get","hasError","touched","passwordControl","confirmPasswordControl","value","checkPasswordMismatchError","dirty","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","RegistroComponent_Template","rf","ctx","ɵɵlistener","RegistroComponent_Template_form_ngSubmit_0_listener","$event","ɵɵelement","ɵɵtemplate","RegistroComponent_mat_error_7_Template","RegistroComponent_mat_error_8_Template","RegistroComponent_mat_error_15_Template","RegistroComponent_mat_error_22_Template","ɵɵproperty","ɵɵadvance"],"sources":["C:\\Users\\ahri1\\mex-com\\src\\app\\registro\\registro.component.ts","C:\\Users\\ahri1\\mex-com\\src\\app\\registro\\registro.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-registro',\n  templateUrl: './registro.component.html',\n  styleUrls: ['./registro.component.scss']\n})\nexport class RegistroComponent {\n  form: FormGroup = this.formBuilder.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required]],\n    confirmPassword: ['', [Validators.required]]\n  });\n\n  constructor(private formBuilder: FormBuilder) { }\n\n  register(event: Event) {\n    event.preventDefault();\n    \n    if (this.form.valid && this.checkPasswordMatch()) {\n      // Aquí puedes enviar los datos de registro al servidor\n      // Por ejemplo, puedes llamar a un servicio de registro:\n      // this.authService.register(this.form.value);\n    }\n  }\n\n  checkRequiredError(controlName: string) {\n    const control = this.form.get(controlName);\n    return control?.hasError('required') && control.touched;\n  }\n\n  checkPasswordMatch() {\n    const passwordControl = this.form.get('password');\n  const confirmPasswordControl = this.form.get('confirmPassword');\n  \n  if (passwordControl && confirmPasswordControl) {\n    const password = passwordControl.value;\n    const confirmPassword = confirmPasswordControl.value;\n    return password === confirmPassword;\n  }\n  \n  return false;\n  }\n\n  checkPasswordMismatchError() {\n    const confirmPasswordControl = this.form.get('confirmPassword');\n    return confirmPasswordControl?.dirty && !this.checkPasswordMatch();\n  }\n}\n","<form [formGroup]=\"form\" class=\"registration-form align-items-center\" fxLayout=\"column\" (ngSubmit)=\"register($event)\">\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\n      <mat-label>Email</mat-label>\n      <input matInput placeholder=\"Type your email\" type=\"email\" formControlName=\"email\">\n      <mat-icon matPrefix>mail_outline</mat-icon>\n      <mat-error *ngIf=\"form && checkRequiredError('email') && !checkRequiredError('email')\">\n        Please enter a valid email address\n      </mat-error>\n      <mat-error *ngIf=\"checkRequiredError('email')\">\n        Email is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\n      <mat-label>Password</mat-label>\n      <input matInput placeholder=\"Type your password\" type=\"password\" formControlName=\"password\">\n      <mat-icon matPrefix>lock_outline</mat-icon>\n      <mat-error *ngIf=\"checkRequiredError('password')\">\n        Password is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\n      <mat-label>Confirm Password</mat-label>\n      <input matInput placeholder=\"Confirm your password\" type=\"password\" formControlName=\"confirmPassword\">\n      <mat-icon matPrefix>lock_outline</mat-icon>\n      <mat-error *ngIf=\"checkPasswordMismatchError()\">\n        Passwords do not match\n      </mat-error>\n    </mat-form-field>\n    <button mat-raised-button color=\"primary\" type=\"submit\" class=\"register-button mt-3\">Register</button>\n  </form>"],"mappings":"AACA,SAAoBA,UAAU,QAAqB,gBAAgB;;;;;;;;;;;ICI7DC,EAAA,CAAAC,cAAA,gBAAuF;IACrFD,EAAA,CAAAE,MAAA,2CACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;;IACZH,EAAA,CAAAC,cAAA,gBAA+C;IAC7CD,EAAA,CAAAE,MAAA,iBAAS;IAAAF,EAAA,CAAAC,cAAA,aAAQ;IAAAD,EAAA,CAAAE,MAAA,eAAQ;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;;IAOpCH,EAAA,CAAAC,cAAA,gBAAkD;IAChDD,EAAA,CAAAE,MAAA,oBAAY;IAAAF,EAAA,CAAAC,cAAA,aAAQ;IAAAD,EAAA,CAAAE,MAAA,eAAQ;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;;IAOvCH,EAAA,CAAAC,cAAA,gBAAgD;IAC9CD,EAAA,CAAAE,MAAA,+BACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;ADlBlB,OAAM,MAAOC,iBAAiB;EAO5BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAN/B,KAAAC,IAAI,GAAc,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACvCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACU,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACW,QAAQ,CAAC,CAAC;MACrCE,eAAe,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACW,QAAQ,CAAC;KAC5C,CAAC;EAE8C;EAEhDG,QAAQA,CAACC,KAAY;IACnBA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI,IAAI,CAACR,IAAI,CAACS,KAAK,IAAI,IAAI,CAACC,kBAAkB,EAAE,EAAE;MAChD;MACA;MACA;IAAA;EAEJ;EAEAC,kBAAkBA,CAACC,WAAmB;IACpC,MAAMC,OAAO,GAAG,IAAI,CAACb,IAAI,CAACc,GAAG,CAACF,WAAW,CAAC;IAC1C,OAAOC,OAAO,EAAEE,QAAQ,CAAC,UAAU,CAAC,IAAIF,OAAO,CAACG,OAAO;EACzD;EAEAN,kBAAkBA,CAAA;IAChB,MAAMO,eAAe,GAAG,IAAI,CAACjB,IAAI,CAACc,GAAG,CAAC,UAAU,CAAC;IACnD,MAAMI,sBAAsB,GAAG,IAAI,CAAClB,IAAI,CAACc,GAAG,CAAC,iBAAiB,CAAC;IAE/D,IAAIG,eAAe,IAAIC,sBAAsB,EAAE;MAC7C,MAAMd,QAAQ,GAAGa,eAAe,CAACE,KAAK;MACtC,MAAMd,eAAe,GAAGa,sBAAsB,CAACC,KAAK;MACpD,OAAOf,QAAQ,KAAKC,eAAe;;IAGrC,OAAO,KAAK;EACZ;EAEAe,0BAA0BA,CAAA;IACxB,MAAMF,sBAAsB,GAAG,IAAI,CAAClB,IAAI,CAACc,GAAG,CAAC,iBAAiB,CAAC;IAC/D,OAAOI,sBAAsB,EAAEG,KAAK,IAAI,CAAC,IAAI,CAACX,kBAAkB,EAAE;EACpE;;AAxCWb,iBAAiB,C;mBAAjBA,iBAAiB,EAAAJ,EAAA,CAAA6B,iBAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAAjB3B,iBAAiB,C;QAAjBA,iBAAiB;EAAA4B,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCR9BtC,EAAA,CAAAC,cAAA,cAAsH;MAA9BD,EAAA,CAAAwC,UAAA,sBAAAC,oDAAAC,MAAA;QAAA,OAAYH,GAAA,CAAA1B,QAAA,CAAA6B,MAAA,CAAgB;MAAA,EAAC;MACjH1C,EAAA,CAAAC,cAAA,wBAAwD;MAC3CD,EAAA,CAAAE,MAAA,YAAK;MAAAF,EAAA,CAAAG,YAAA,EAAY;MAC5BH,EAAA,CAAA2C,SAAA,eAAmF;MACnF3C,EAAA,CAAAC,cAAA,kBAAoB;MAAAD,EAAA,CAAAE,MAAA,mBAAY;MAAAF,EAAA,CAAAG,YAAA,EAAW;MAC3CH,EAAA,CAAA4C,UAAA,IAAAC,sCAAA,uBAEY;MACZ7C,EAAA,CAAA4C,UAAA,IAAAE,sCAAA,uBAEY;MACd9C,EAAA,CAAAG,YAAA,EAAiB;MACjBH,EAAA,CAAAC,cAAA,wBAAwD;MAC3CD,EAAA,CAAAE,MAAA,gBAAQ;MAAAF,EAAA,CAAAG,YAAA,EAAY;MAC/BH,EAAA,CAAA2C,SAAA,gBAA4F;MAC5F3C,EAAA,CAAAC,cAAA,mBAAoB;MAAAD,EAAA,CAAAE,MAAA,oBAAY;MAAAF,EAAA,CAAAG,YAAA,EAAW;MAC3CH,EAAA,CAAA4C,UAAA,KAAAG,uCAAA,uBAEY;MACd/C,EAAA,CAAAG,YAAA,EAAiB;MACjBH,EAAA,CAAAC,cAAA,yBAAwD;MAC3CD,EAAA,CAAAE,MAAA,wBAAgB;MAAAF,EAAA,CAAAG,YAAA,EAAY;MACvCH,EAAA,CAAA2C,SAAA,gBAAsG;MACtG3C,EAAA,CAAAC,cAAA,mBAAoB;MAAAD,EAAA,CAAAE,MAAA,oBAAY;MAAAF,EAAA,CAAAG,YAAA,EAAW;MAC3CH,EAAA,CAAA4C,UAAA,KAAAI,uCAAA,uBAEY;MACdhD,EAAA,CAAAG,YAAA,EAAiB;MACjBH,EAAA,CAAAC,cAAA,iBAAqF;MAAAD,EAAA,CAAAE,MAAA,gBAAQ;MAAAF,EAAA,CAAAG,YAAA,EAAS;;;MA5BpGH,EAAA,CAAAiD,UAAA,cAAAV,GAAA,CAAAhC,IAAA,CAAkB;MAKNP,EAAA,CAAAkD,SAAA,GAAyE;MAAzElD,EAAA,CAAAiD,UAAA,SAAAV,GAAA,CAAAhC,IAAA,IAAAgC,GAAA,CAAArB,kBAAA,cAAAqB,GAAA,CAAArB,kBAAA,UAAyE;MAGzElB,EAAA,CAAAkD,SAAA,GAAiC;MAAjClD,EAAA,CAAAiD,UAAA,SAAAV,GAAA,CAAArB,kBAAA,UAAiC;MAQjClB,EAAA,CAAAkD,SAAA,GAAoC;MAApClD,EAAA,CAAAiD,UAAA,SAAAV,GAAA,CAAArB,kBAAA,aAAoC;MAQpClB,EAAA,CAAAkD,SAAA,GAAkC;MAAlClD,EAAA,CAAAiD,UAAA,SAAAV,GAAA,CAAAZ,0BAAA,GAAkC"},"metadata":{},"sourceType":"module","externalDependencies":[]}